{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":"<p>{{ blog_content }}</p>"},{"location":"blog/annotated/","title":"The power of <code>Annotated[]</code> is being unleashed","text":"<p><code>Annotated[]</code> type arrived at Python 3.6 as per PEP 527. It is now getting more use cases.</p>"},{"location":"blog/annotated/#what-is-it-anyway","title":"What is it anyway?","text":"<p>From <code>mypy</code> point of view, <code>Annotated[T, foo, bar, baz, ...]</code> is strictly equivalent to <code>T</code>, its first argument. The remaining arguments can be any Python objects. For instance,</p> <pre><code>greeting: Annotated[str, 5, ..., [], 'boombadam', float]\n</code></pre> <p>is valid.</p>"},{"location":"blog/annotated/#why-to-use-it","title":"Why to use it?","text":"<p>To attach additional metadata to type annotations in Python. Even though <code>mypy</code> does not care for said metadata, other libraries might make use of it.</p>"},{"location":"blog/annotated/#use-cases","title":"Use Cases","text":"<p>This table is a snapshot of things how they are at the moment of writing this post. Things are going to change.</p> Library declaring the annotation Annotation Library using the annotation Purpose <code>annotated-types</code> <code>Gt</code> <code>Lt</code> <code>Ge</code> <code>Le</code> <code>Interval</code> <code>pydantic</code> &gt; &lt; \u2a7e \u2a7d and generic interval validators <code>MinLen</code> <code>MaxLen</code> <code>Len</code> Sequence length validators <code>Timezone</code> Validate timezone for a datetime value <code>Predicate</code> Validate value satisfies a given predicate <code>GroupedMetadata<code> Combine multiple annotations into one <code>\u2026<code> \u2026 <code>pydantic</code> <code>Strict</code> Validate the value in strict mode <code>Field</code> Specify Pydantic validation rules <code>\u2026<code> \u2026 <code>typing-extensions</code> <code>doc</code>                      mkdocstrings                  Document a variable, function parameter, or class field <code>typing</code> ,                 starting at Python 3.13 (if PEP 727 passes)                      FastAPI                  <code>Query</code>                  FastAPI              Designate this as a query parameter <code>Path</code> Designate as a path parameter <code>Body</code> Designate as a body parameter <code>Depends</code> Inject a dependency                      Typer                  <code>Argument</code> <code>Option</code>                  Typer                               Designate function parameter as CLI option or argument."},{"location":"blog/annotated/#documenting-function-arguments","title":"Documenting function arguments","text":"<p>One of the cases above I would want to attract your attention to is <code>doc()</code> annotation, proposed by PEP 727 and best illustrated by an example:</p> <pre><code>from typing import Annotated, doc\n\n\ndef create_user(\n    lastname: Annotated[str, doc(\"The **last name** of the newly created user\")],\n    firstname: Annotated[str | None, doc(\"The user's **first name**\")] = None,\n) -&gt; Annotated[User, doc(\"The created user after saving in the database\")]:\n\"\"\"\n    Create a new user in the system, it needs the database connection to be already\n    initialized.\n    \"\"\"\n</code></pre> <p>This is another way to document function parameters, in addition to two existing methods:</p> <ul> <li>in the docstring,</li> <li>and via inline comments.</li> </ul> <p>Let's compare those approaches.</p> <p>Scope</p> <p>I am intentionally leaving out other applications of <code>doc()</code> \u2014 annotation of variables and class fields. I believe that function signature annotations are much more often met in real code than the other use cases and thus will be most substantial to the overall developer experience.</p> Docstrings Inline comments <code>doc()</code> Standardized?                  \ud83d\udfe1 Multiple competing standards Google,                     numpy, and more                                   \ud83d\udd34 No Or nothing I know of                  \ud83d\udfe2 Yes                      by PEP 727 Looking at parameter definition, how easy it is to locate its description?                  \ud83d\udfe1 Moderately easy One has to scroll to the docstring and find it there \ud83d\udfe2 Very easy \ud83d\udfe2 Very easy How verbose is function signature? \ud83d\udfe2 Not verbose                  \ud83d\udfe1 A bit more verbose Comments added                  \ud83d\udd34 Significantly more verbose <code>Annotated[\u2026, doc('\u2026')]</code> can be lengthy How verbose is the docstring?                  \ud83d\udd34 Verbose Every parameter has to be detailed there \ud83d\udfe2 Not verbose \ud83d\udfe2 Not verbose How hard is it to extract parameter documentation programmatically?                  \ud83d\udd34 Very hard Support multiple standards and recognize which is used                  \ud83d\udfe1 Moderately hard Forces to extract docs from Python AST                  \ud83d\udfe2 Very easy <code>something.__annotations__</code> gets the job done <p>Verbosity</p> <p>Verbosity of function signature is the most prevalently articulated argument against using <code>Annotated[]</code> widely. However, it might be argued that verbosity does not appear out of the blue; it is just being moved from the docstring to the signature \u2014 and thus made arguably more manageable.</p>"},{"location":"blog/annotated/#more-ideas-for-annotations","title":"More ideas for annotations","text":"<p>If you have a hammer \u21d2 everything around looks like a nail.</p> Argument is being mutated TODO &amp; FIXME markers <p><pre><code>Annotated[dict, MutatedArgument('Accumulator to store cached `Badabazinga` instances.')]\n</code></pre> If the argument of a function is mutated in the function, convey that information for documentation and linters. By default, functions should not do that; but if they do \u2014 this should be very clearly evident.</p> <p><pre><code>Annotated[str, TODO('Use an `Enum` instead of a plain string.', ticket='PRJ-123')]\n</code></pre> Make <code>TODO</code> and <code>FIXME</code> markers more semantic and integrate them into project docs. IDE might show this hint every time the user hovers over the annotated value, even at a completely different place in the code.</p> <p>Do you have anything in mind? Feel free to  submit a PR.</p>"},{"location":"blog/annotated/#conclusion","title":"Conclusion","text":"<p>I do not care for increased verbosity that the reliance on <code>Annotated[]</code> introduces to type annotations for parameters, fields, and variables, as long as</p> <ul> <li>repetition is avoided,</li> <li>and the annotations provide both proteine- and silicon-based developers with semantically rich information about the code they are reading.</li> </ul> <p>Looking forward to making my code more readable and documentable then it ever was.</p>"},{"location":"blog/bash-basename/","title":"Extract base name & extension in bash","text":"<pre><code>bash-3.2$ FILENAME=somefile.tar.gz\nbash-3.2$ echo \"${FILENAME%%.*}\"\nsomefile\nbash-3.2$ echo \"${FILENAME%.*}\"\nsomefile.tar\n</code></pre>"},{"location":"blog/terminal-recorder/","title":"Terminal recorder","text":"Output Format Scripting Runs Commands Archived @ GitHub https://github.com/faressoft/terminalizer svg \u274c https://github.com/neatsoftware/term-sheets gif \u2714\ufe0f \u274c https://github.com/nbedos/termtosvg \u2714\ufe0f https://github.com/marionebl/svg-term-cli https://asciinema.org https://github.com/ovh/ovh-ttyrec https://github.com/mjording/ttyrec https://github.com/slowli/term-transcript/cli \u2714\ufe0f \u2714\ufe0f https://github.com/sloria/doitlive https://github.com/pawamoy/shelldemo https://github.com/ines/termynal \u2714\ufe0f \u274c"},{"location":"blog/tmux/","title":"tmux","text":"<p>.</p>"},{"location":"blog/walrus/","title":"Apology of the walrus operator","text":"<p>Python walrus operator has been a source of controversy in the community. Let's list a few of its use cases.</p>"},{"location":"blog/walrus/#conditions","title":"Conditions","text":"<pre><code>if (status := subsystem.Something().status).is_success():\n    return status\n</code></pre>"},{"location":"blog/walrus/#pytest","title":"<code>pytest</code>","text":"<p>Provide an informative assertion error message in <code>pytest</code>.</p> <pre><code>def test_something():\n    assert (\n        response := requests.get(...)\n    ).json() == {'foo': 'bar'}, response.text\n</code></pre>"},{"location":"blog/walrus/#list-comprehensions","title":"List comprehensions","text":"<p>Transform the iterating value and filter by it.</p> <pre><code>popular_repos = [\n    name\n    for repo in github_api_response\n    if (name := repo['name']) and repo['stargazers_count'] &gt; 100\n]\n</code></pre>"},{"location":"blog/walrus/#antipatterns","title":"Antipatterns","text":"<ul> <li>\u2254 + \u03bb</li> </ul> <p>Linters?</p> <p>What do we have on linters' front about walrus?</p>"},{"location":"blog/walrus/#parallels","title":"Parallels","text":"<ul> <li><code>let</code> in Rust</li> <li>Monads?</li> </ul>"},{"location":"blog/cs111/","title":"<code>CS111</code> Discrete Mathematics","text":"<p>In academic year 2022, I have enrolled at a bachelor Discrete Mathematics course at AUA.</p> <p>I have drawn a few cheat sheets / visualizations during the course. Find them below.</p>"},{"location":"blog/cs111/#relations","title":"Relations","text":"<p>.</p>"},{"location":"blog/cs111/#functions","title":"Functions","text":"<p>.</p>"},{"location":"blog/cs111/#max-min","title":"Max &amp; Min","text":"<p>.</p>"},{"location":"blog/cs111/#bounds-extremum-infimum","title":"Bounds, extremum, &amp; infimum","text":"<p>.</p>"},{"location":"blog/cs111/#cantors-theorem","title":"Cantor's theorem","text":"<p>.</p>"},{"location":"blog/cs111/#algebraic-structures","title":"Algebraic Structures","text":"<p>.</p>"},{"location":"blog/cs111/#abelian-group","title":"Abelian Group","text":""},{"location":"blog/cs111/#field","title":"Field","text":"<p>.</p>"},{"location":"blog/cs111/#group","title":"Group","text":"<p>.</p>"},{"location":"blog/cs111/#monoid","title":"Monoid","text":"<p>.</p>"},{"location":"blog/cs111/#ring","title":"Ring","text":"<p>.</p>"},{"location":"blog/mkdocs-blog-plugins/","title":"MkDocs plugins for blogging","text":"<p>MkDocs was designed to manage software project documentation, but in fact it is a very wide purpose static site generator. Can you use it to write your personal blog? Yes, most assuredly. Here are a few plugins for that.</p> Last Commit Latest Release Github Stars Requires Nested Dirs Supports Frontmatter \ud83c\udff7\ufe0f Tags \ud83d\udcac Notes \u2714\ufe0f My Choice https://github.com/andyoakley/mkdocs-blog file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b0 file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b1 Looks unmaintained \u2639 https://github.com/derJD/python-mkblog file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b2 file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b3 https://github.com/fmaida/mkdocs-blog-plugin file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b4 \u274c https://github.com/liang2kl/mkdocs-blogging-plugin file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b6 file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b7 \u2714\ufe0f Uses front matter or Git log to retrieve date per blog entry. file:///home/runner/work/yeti.sh/yeti.sh/docs/blog/mkdocs-blog-plugins/index.md/b5 https://github.com/vuquangtrong/mkdocs-material-blog \u2714\ufe0f Is a theme, not a plugin."},{"location":"blog/task-relations/","title":"Prefer task dependencies over subtasks","text":"<p>Planning a project means building a model of its future development, a model that will evolve as the project progresses. If the model is close enough then it should help us manage our efforts; but attempts to make it too close will mean we'll spend too much time on the model itself instead of putting the necessary effort into the real work.</p> <p>Let's look into one particular aspect of software project management: relation between tasks.</p>"},{"location":"blog/task-relations/#subtasks-supertasks","title":"Subtasks &amp; Supertasks","text":"<ul> <li><code>DEV-1</code>: Write a post about tasks in software projects<ul> <li><code>DEV-2</code>: Come up with an example of a supertask with subtasks</li> <li><code>DEV-3</code>: Note about Jira sprints</li> <li><code>DEV-4</code>: Do something else</li> <li><code>DEV-5</code>: Publish the post</li> </ul> </li> </ul> <p>Supported by many Agile-oriented project management systems like Jira, Asana, Notion, or Linear, this helps decompose complex pieces of work into smaller pieces.</p>"},{"location":"blog/task-relations/#supertasks-jira-sprints","title":"Supertasks &amp; Jira sprints","text":"<p>By the end of the sprint, you might have the following tasks structure:</p> <ul> <li><code>DEV-1</code>: Write a post about tasks in software projects<ul> <li><code>DEV-2</code>: Come up with an example of a supertask with subtasks</li> <li><code>DEV-3</code>: Note about Jira sprints</li> <li><code>DEV-4</code>: Do something else</li> <li><code>DEV-5</code>: Publish the post</li> </ul> </li> </ul> <p>As current sprint <code>SP1</code> expires, <code>DEV-1</code> will be moved to the next one (<code>SP2</code>), together with each subtask, \u2014 even the ones which were already completed.</p> <p>This will:</p> <ul> <li>Distort the backlog for <code>SP2</code> sprint,</li> <li>corrupt the team velocity, if that metric is being tracked.</li> </ul>"},{"location":"blog/task-relations/#should-a-supertask-have-an-associated-pull-request","title":"Should a supertask have an associated pull request?","text":"No, supertask is only a container for subtasks Yes, supertask can have a PR itself Can user provide an estimate? \u274c Yes, the user might estimate the work assigned to supertask itself What estimate to show to the user? \u2211 of estimates of all subtasks \u2211 of estimates of all subtasks + estimate of the work assigned to the supertask itself Definition of Done Each of the subtasks complete Each of the subtasks is complete, and then the supertask itself is complete Can the supertask be automatically closed when each of the subtasks is closed? IMHO it should not be (see below) No, because it has some more work attached to it Who is supertask assignee? The one who responsible for the whole feature end to end, and makes sure all pieces integrate The one who does the supertask itself and should also be responsible for the feature integration <p>If we're treating supertasks as containers then, theoretically, we can automatically close a supertask as soon as each of its subtasks is closed. In reality, however, I wouldn't be so bold:</p> <ul> <li>New circumstances reveal themselves, more work needs to be done</li> <li>Each developer has done their respective subtask, but results of their work suddenly do not integrate very well</li> <li>The feature as a whole has to be showcased to stakeholders and can be considered Done only when they approve</li> </ul> <p>I personally would vote for supertasks-as-containers approach but, due to estimation difficulties and the tendency of Definition of Done to slip between the fingers, I do not feel this model well fits the reality.</p> <p>Any alternatives?</p>"},{"location":"blog/task-relations/#task-dependencies","title":"Task Dependencies","text":"<p>Instead of parent-to-child relations, we can keep all tasks on one level \u2014 and link them to each other with <code>blocks</code> relationships.</p> <ul> <li>No need for container tasks</li> <li>The end goal \u2014 the purple task \u2014 should contain any validation or verification work and has its own assignee who is not necessarily responsible for all of its dependencies</li> </ul> %3 file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b16 \u22bb I had already started a task, and it is too large I will do the task Someone else will take part of the work file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b14 I am a developer file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b16:e-&gt;file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b14:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b10 Note about Jira sprints local_write-paper-about-task-relations Write a post about task relations file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b10:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b11 Rewrite the example as dependencies roadmap file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b11:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b12 Come up with an example of a supertask with subtasks file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b12:e-&gt;file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b11:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b13 Catalog use cases against tasks file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b13:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b14:e-&gt;file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b13:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b15 I am a manager file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b15:e-&gt;file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b13:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b19 I have to turn a large piece work into multiple smaller tasks file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b19:e-&gt;file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b15:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b3 Which project management systems support dependencies? file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b3:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b4 Reference PDD file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b4:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b5 Reference PERT file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b5:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b6 Reference CPM file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b6:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b7 Write down more differences between subtasking and dependencies file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b7:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b8 Write about network planning, PERT, CPM, and Gantt charts file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b8:e-&gt;local_write-paper-about-task-relations:w file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b9 Strike-through does not work file_///home/runner/work/yeti.sh/yeti.sh/docs/blog/task-relations/roadmap.yaml/b9:e-&gt;local_write-paper-about-task-relations:w <p>How does this approach compare against subtasks?</p> Subtasks Dependencies Dependencies between tasks Are implicit, they are discussed on planning and maybe mentioned in task descriptions Are explicit Feature is too large Refactor: supertask \u2192 a project, undone subtasks \u2192 normal tasks in that project, &amp; close the supertask Nothing to refactor \u263a Which task to start? Tasks in current sprint \u2229 Tasks you are qualified to do The left ones \u2229 those which are not blocked by other tasks \u2026 \u2026 \u2026"},{"location":"blog/task-relations/#dependencies-support-in-project-management-software","title":"Dependencies support in project management software","text":"Define dependencies Prevent a blocked task from being started Jira \u2714\ufe0f \u274c Linear \u2714\ufe0f \u274c"},{"location":"cv/","title":"Anatoly Scherbakov | CV","text":""},{"location":"cv/#key-expertise","title":"Key Expertise","text":"<ul> <li>Design and architecture of business automation software</li> <li>Its implementation in Python programming language</li> <li>Code review, peer programming</li> <li>Keeping code clean &amp; maintainable</li> </ul>"},{"location":"cv/#currently","title":"Currently","text":"<p>Software Developer at Datafold | datafold.com</p> <p>Creating solutions to make data engineers' life better.</p> <p></p>"},{"location":"cv/#research","title":"Research","text":"<p>Independent researcher/engineer in the field of Semantic Web &amp; Linked Data.</p> Contributor to: Main research interest: <code>rdflib</code> <code>yaml-ld</code> <code>iolanta</code>"},{"location":"cv/#technologies","title":"Technologies","text":"Python Storage &amp; communication systems <code>mypy</code> <code>flake8</code> <code>pydantic</code> <code>typer</code> <code>fastapi</code> <code>pandas</code> <code>postgresql</code> <code>redis</code> <code>clickhouse</code> <code>neo4j</code> <code>redshift</code> Cloud Semantics <code>lambda</code> <code>s3</code> <code>ec2</code> <code>ecs</code> <code>rds</code> <code>sqs</code> <code>stepfunctions</code> <code>eventbridge</code> <code>rdf</code> <code>rdfs</code> <code>owl</code> <code>sparql</code> <code>rdflib</code> <code>owl-rl</code> <code>json-ld</code> <code>yaml-ld</code> Also Tools <code>rust</code> <code>bash-scripting</code> <code>git</code> <code>linear</code> <code>jira</code> <code>pycharm</code>"},{"location":"cv/#career","title":"Career","text":""},{"location":"cv/#2012-2022-recall-masters-inc-senior-software-developer-team-lead","title":"2012 \u2014 2022 | Recall Masters Inc \u2014 Senior Software Developer, Team Lead","text":"<p>Recall Masters Inc (California, US) \u2014 An Automotive Safety Company \u2014 recallmasters.com </p> <p>Implemented the first MVP and, subsequently, the full fledged automation app on Django to support the company's business process. Built the internal development department supporting the system and moving forward together with the growing business. Handling the transfer from the monolith application to microservices based system.</p>"},{"location":"cv/#2011-2014-vboost-inc-software-developer","title":"2011 \u2014 2014 | Vboost Inc \u2014 Software Developer","text":"<p>Vboost Inc (California, US) \u2014 An Automotive Marketing Company \u2014 vboost.com </p> <p>Built an MVP and then the full scaled business automation system on Python/Django. Invited developers and formed a small dev team to support the project.</p>"},{"location":"cv/#2012-freelance","title":"2012 | Freelance","text":"<p>odesk.com (now upwork.com)</p> <p>A number of projects, mostly in Python and Django. The latter, at some point, became one of my favorite tools.</p>"},{"location":"cv/#2008-2011-ongnet-inc-web-developer","title":"2008 \u2014 2011 | OngNet Inc \u2014 Web Developer","text":"<p>OngNet Inc (Gorno-Altaysk, Russia) \u2014 Region scale broadband internet provider</p> <p>Company website (in PHP and subsequently Python). Internal automation for billing system and routing.</p>"},{"location":"cv/#2007-2013-tomsk-university-of-control-systems-and-microelectronics-student","title":"2007 \u2014 2013 | Tomsk University of Control Systems and Microelectronics \u2014 student","text":"<p>TUCSR (Tomsk, Russia) \u2014 One of the leading tech universities of Russia to the east of Urals</p> <ul> <li>Major: Applied Computer Science in Economics</li> <li>Degree: specialist/engineer, with honors</li> <li>Thesis: Discrete Event Simulation of Business Processes<ul> <li>Kind of childish one, actually</li> </ul> </li> <li>Online education</li> </ul>"},{"location":"ideas/","title":"\ud83d\udca1 Ideas","text":"<p>In this section of the site, I publish ideas for projects I haven't got time or energy to even start.</p> <p>These pages are intended to:</p> <ul> <li>structure my thoughts on these subjects,</li> <li>get these thoughts out of my system, free my mind to think about the issues at hand rather than distracting to something new that tries to grasp my imagination,</li> <li>and perhaps provide groundwork to start those projects someday in the future \u2014 maybe to myself or to someone else.</li> </ul> <p>Consider this section of the site a shameless collection of quick and dirty drafts.</p>"},{"location":"ideas/interplanner/","title":"interplanner","text":""},{"location":"ideas/interplanner/#target-audience","title":"Target audience","text":"<ul> <li>Linked Data community,</li> <li>Tech-savvy individuals,</li> <li>Companies,</li> <li>Individuals from the general audience,</li> <li>Government agencies,</li> <li>the humanity as a whole.</li> </ul>"},{"location":"ideas/interplanner/#problem","title":"Problem","text":"<p>When you have a plan, normally the reality never goes exactly as planned. Every kind of random things happen, disrupting the plans of individuals, companies, governments, and the whole of mankind. Planning is extremely difficult to get right.</p> <p>However, it is still very much necessary for survival on all levels: from an individual to the whole species.</p> <p>We have huge problems which can't be solved without such a level of planning:</p> <ul> <li>improve education on a global scale,</li> <li>solve the shortage of energy,</li> <li>prevent pandemics proactively,</li> <li>solve the global climate change,</li> <li>from producing waste, go to a closed-cycle economically viable manufacturing system,</li> <li>evolve to become an interplanetary species,</li> <li>\u2026</li> </ul> <p>These issues will define it whether we survive \u2014 or we die out.</p> <p>In order to make planning useful, our plans need to satisfy the following criteria.</p> <ul> <li>the planning system of an individual, organization, or the whole human race must include multiple different scenarios of what might happen;</li> <li>there must be scenarios on multiple levels: short-term, mid-term, long-term;</li> <li>every scenario must be assigned a probability, at least relative and crude, of its coming into existence;</li> <li>the scenarios, especially short term ones, must be revised constantly.</li> </ul> <p>We do not have a system that does that, at least, semi-automatically.</p>"},{"location":"ideas/interplanner/#essence","title":"Essence","text":"<p><code>interplanner</code> is a headless planning maintenance system that operates over an <code>iolanta</code>-capable semantic graph. That permits to use <code>iolanta</code> oracles to retrieve data from sources, and to upload the results of planning to the graph whatever medium it might use.</p> <ul> <li>Inputs of <code>interplanner</code> are semantic data from any kind of source:<ul> <li>time tracking records,</li> <li>existing short-term plans manually managed by the person in a tool like Todoist,</li> <li>oracles of neural network systems,</li> <li>financial statements, cost and income estimates,</li> <li>projected events and their frames (min time \u2026 max time),</li> <li>wikidata, dbpedia, github, any other information source supported by <code>iolanta</code> ecosystem.</li> </ul> </li> <li><code>interplanner</code> outputs an RDF dataset which encodes (typically very many) scenarios:<ul> <li>every scenario is a sequence of events, each tied to time,</li> <li>events might be accompanied by financial information, links to external resources, whatever else,</li> <li>each scenario might be ranked.</li> </ul> </li> </ul> <p>Info</p> <p>Perhaps rename this tool to <code>scenarist</code> or <code>scriptwriter</code>?</p>"},{"location":"ideas/interplanner/#how-is-this-done","title":"How is this done?","text":"<p>Judging from the input data, <code>interplanner</code> will do the following stages.</p> <ol> <li>Combinatorial explosion. Given the input data and the time frame to plan for, it will first deduce every scenario that is possible given the input data. This stage will give us a huge number of scenarios.</li> <li>Selection. Exclude the scenarios which are impossible.<ul> <li>exclude events which are of too low probability over the time span we are planning for,</li> <li>if a scenario contains mutually exclusive events then skip it,</li> <li>if this scenario is conflicting with a plan of another level, skip it,</li> <li>etc.</li> </ul> </li> <li>Optimization. Rank every scenario according to the optimization function the user has requested.<ul> <li>That might be time spent on certain tasks,</li> <li>or achievement of certain goals,</li> <li>or whatever.</li> </ul> </li> </ol> <p>As a result of an <code>interplanner</code> run we get a semantic graph of scenarios from which we can choose those that we like. Multiple such incarnations can be used in a hierarchical manner. You can't recalculate the global plan for the whole of humanity every day, it's too large; but you can recalculate small pieces of it here and there, and use their integrated results as inputs for the master strategy.</p>"},{"location":"ideas/interplanner/#vocabulary-examples","title":"Vocabulary examples","text":"<p><code>interplanner</code> will very heavily rely upon other systems. For example, - accounting/financial systems to understand what we can afford, - legal data to know how much time a person can work and which days are holidays or days off.</p> <p>In general, something like this can be imagined:</p> <ul> <li><code>requiresTime</code> to define how long an event or task takes to be completed,</li> <li><code>hasPreRequisite</code> to define relationships between tasks,</li> <li><code>hasProbabililty</code> defines how possible an event is,</li> <li>\u2026</li> </ul>"},{"location":"ideas/interplanner/#state-of-the-art","title":"State of the art","text":"<ul> <li><code>Design methods</code> by G. K. Jones</li> <li>Existing Optimization systems, if any</li> <li>Discrete optimization methods and strategies</li> </ul>"},{"location":"ideas/interplanner/#evolution","title":"Evolution","text":"<ul> <li>Octadocs?<ul> <li>Can this be an application of Octadocs? How can it be used to improve software project documentation in view of how companies plan their work with task trackers?</li> <li>I do not know at this point.</li> </ul> </li> <li>iolanta<ul> <li>first this will probably be a personal tool,</li> <li>and then it can be expanded to be able to upload scenarios to IPFS and render them from there.</li> </ul> </li> <li>\u2026</li> </ul>"},{"location":"ideas/terry/","title":"Terry","text":""},{"location":"ideas/terry/#problem","title":"Problem","text":"<p>While coding, a developer sometimes notices an issue, something that has to be addessed in the future but isn't strictly related to the developer's current task at hand. The developer might:</p> <ul> <li>ignore the issue;</li> <li>decide to get to it later, immediately forget, and never return;</li> <li>write it down somewhere on a scratch of paper which will subsequently be found by the developer's cat and made away with;</li> <li>write a TODO comment which will never be tracked and remembered of;</li> <li>make a ticket in the project's task management system.</li> </ul> <p>The last is the best thing to do in the long term, but it forces the developer to switch context, and breaks concentration.</p>"},{"location":"ideas/terry/#approach","title":"Approach","text":"<p>There has been an idea to combine the last two alternatives and write a specially formed TODO or FIXME comments. For instance:</p> <pre><code># fixme:\n#   title: Rename do_something function to reflect what it is really doing\n#   assignee: me\n#   priority: low\ndef do_something():\n    ...\n</code></pre> <p>An automatic system will then parse this comment and create an issue in the project's task management system itself. Such a comment is known as a puzzle. The idea is named Puzzle Driven Development (PDD) and is apparently proposed by Egor Bugaenko.</p>"},{"location":"ideas/terry/#previous-art","title":"Previous art","text":"<ul> <li>See <code>state-of-the-art.yaml</code>.</li> </ul> <p>Todo</p> <p>Visualize that.</p>"},{"location":"ideas/terry/#todo","title":"Todo","text":"<p>I believe Bugaenko's <code>zerocrat</code> is a complex solution that does multiple things. I'd want to create a very simple tool for the same exact purpose and a more modular one, supporting different task management systems.</p> <p>The tool might be named <code>terry</code> after Terry Gilliam, who played Bridge Keeper in Monty Python and the Holy Grail, an antagonist who asked people hard questions. Or puzzles. Just as what we're doing here.</p> <p>So the workflow is like this: you write a <code>FIXME</code> or <code>TODO</code> comment just as described above; that comment is formatted as YAML. When you run <code>terry</code> CLI tool against your code base (as a pre-commit hook, for example), it will search for such comments and resolve them. Meaning, the comment will be changed and will now look like this:</p> <pre><code># fixme:\n#   id: https://github.com/vasya/pupkin/issues/15\n#   title: Rename do_something function to reflect what it is really doing\n#   assignee: me\n#   priority: low\ndef do_something():\n    ...\n</code></pre> <p>A GitHub issue has been created from this comment. Now the comment is considered resolved. You can proceed with committing this to the repo.</p>"},{"location":"ideas/terry/#how-this-helps","title":"How this helps","text":"<p>In the spirit of PDD, this allows to keep tasks/issues small and therefore more manageable. This prevents changes of focus, works with multiple programming and markup languages, is open source, very small, and works very fast even on humongous code bases due to massive parallelism.</p>"},{"location":"ideas/terry/#implementation","title":"Implementation","text":"<ul> <li>Perhaps such a thing already exist?<ul> <li>[] Research</li> </ul> </li> <li>Language:<ul> <li>Python<ul> <li>(+) There are great YAML libraries</li> <li>(+) Faster to develop</li> <li>(+) Easier to create a plugin system</li> <li>(-) Harder to do parallelism</li> <li>(-) Harder to make it fast</li> </ul> </li> <li>Rust<ul> <li>(+) Much better parallelism and faster to run</li> <li>(+) More personally educational for the author</li> <li>(-) Slower to develop</li> <li>(?) Is there a library like Python YAML libraries which preserve exact formatting of the document while editing it?</li> <li>(?) Plugin system based on what?<ul> <li>JSON-RPC!</li> </ul> </li> </ul> </li> </ul> </li> <li>Can one do this at all BTW?<ul> <li>Patent is abandoned, so yes.</li> </ul> </li> <li>How do we build integrations with task management systems?<ul> <li>Plainly as plugins with standardized API</li> <li>Or somehow via a semantic interaction layer, if that makes sense     How does it make sense? I have no idea ATM</li> </ul> </li> <li>How do we integrate with different programming &amp; markup languages?<ul> <li>Extract the relevant piece of code,</li> <li>Make account of the function, class, module where the comment is located,</li> <li>Format all this beautifully and insert into the newly created ticket</li> </ul> </li> <li>Do we care about changes?<ul> <li>For example, when we update the puzzle comment, do we then go and update the ticket?</li> <li>How do we make sure we don't overwrite whatever humans have already written there?</li> </ul> </li> </ul>"},{"location":"ideas/terry/#extensions","title":"Extensions","text":"<ul> <li>Datadog<ul> <li>specify measurement units for metrics</li> <li>create alerts</li> </ul> </li> <li>Calendars<ul> <li>Schedule meetings?</li> </ul> </li> <li>Octadocs<ul> <li>Ingest information into the graph (hey this might prove interesting as an integration method actually)<ul> <li>This might shift the whole focus of the tool</li> <li>This might mean we will use <code>pytkdocs</code> to parse stuff<ul> <li>but then how to write back??</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"ideas/terry/decisions/001-plugin-communication/","title":"Communicate with plugins via stdin & stdout","text":"<p>The main <code>terry</code> executable will communicate with language-specific and scheduler-specific plugins sending text-based messages to their stdin and reading analogous messages from their stdout.</p>"},{"location":"ideas/terry/decisions/001-plugin-communication/#context","title":"Context","text":"<p>At the moment of writing this document, it isn't yet clear in what programming language to write <code>terry</code>. Anyway, I believe it to be important to ensure that plugins for <code>terry</code> must be language agnostic.</p>"},{"location":"ideas/terry/decisions/001-plugin-communication/#decision","title":"Decision","text":"<pre><code>criteria:\nlanguage-agnostic:\ntitle: Language Agnostic\nease-of-debug:\ntitle: Debuggability\n\nalternatives:\n- title: socket-based communication\nlanguage-agnostic: yes\nease-of-debug: 3\n- title: stdin/stdout communication\nlanguage-agnostic: yes\nease-of-debug: 1\n</code></pre>"},{"location":"ideas/terry/decisions/002-communication-format/","title":"Communication Format","text":"<pre><code>criteria:\nhuman-readable:\ntitle: Human Readable\n\nalternatives:\n- id: json-rpc\nhuman-readable: yes\n- id: protobuf\nhuman-readable: no\n</code></pre>"},{"location":"ideas/terry/decisions/003-json-rpc-ld/","title":"JSON-RPC messages are annotated with LD contexts","text":"<p>@context declarations allow to modify the message format within certain bounds without breaking compatibility.</p>"},{"location":"ideas/terry/decisions/003-json-rpc-ld/#communicating-components","title":"Communicating components","text":"<p>In certain circumstances, <code>terry</code> issues a command <code>terry.dev/create-task</code> which is expected to create a task with a title, description, type(s), and assignee. The task management plugin must create that task.</p> <p><code>terry-github</code> plugin is built specifically for <code>terry</code> and understands that command. Everything is fine.</p> <p>Now what if we want to tie <code>terry</code> and a generic interfacing program for a task manager system? For instance, <code>jira-jsonrpc-ld</code> is a tool that accepts a different command: <code>ld.dev/create-task</code>, with different parameters.</p> <p>Can we make these two tools friends?</p> <p>Let's assume that we do not wish to change the source code of these tools. They need to be built from the beginning in a way which allows us to make them composable.</p>"},{"location":"ideas/terry/decisions/003-json-rpc-ld/#who-is-going-to-extend-the-hand","title":"Who is going to extend the hand?","text":"<p>The two tools must use a format that both of them can understand. We have choices.</p> <pre><code>alternatives:\n- id: `terry` adapts its output\ntitle: `terry` changes its JSON-RPC message format so that `jira-jsonrpc-ld` can understand it.\ngood: no\nbecause: This will mean that `terry` must receive a communication from `jira-jsonrpc-ld` to explain at least something about the format the latter can understand. This means the one-way communication that we've been looking at converts into a two-way communication, dramatically increasing the complexity of the system. Let's avoid that.\n- id: `jira-jsonrpc-ld` interprets `terry`'s output\ngood: yes\n- id: `terry-to-jira` intermediate program is written and placed between the counterparts.\ngood: so-so\nbecause: This is probably unavoidable in many situations but let's try to get along without such an effort whenever possible.\n</code></pre>"},{"location":"ideas/terry/decisions/003-json-rpc-ld/#how-will-jira-jsonrpc-ld-adapt-the-incoming-message","title":"How will <code>jira-jsonrpc-ld</code> adapt the incoming message?","text":"<p>The names of fields, their types and stuff \u2014 all of that is different for the two tools. I know two ways of coercing one into another without writing custom code in a general purpose language:</p> <pre><code>alternatives:\n- id: json-ld-framing\n- id: rdf-and-owl\n</code></pre> <p>!!! warning \"todo     I have no evidence at this point to prefer one to the other. However, I do not know whether it is possible to coerce a document based on one ontology to another ontology with framing. With OWL, that's certainly possible but that requires more computing power. Further research is necessary.</p>"},{"location":"projects/","title":"Projects","text":"<ul> <li>anatoly-scherbakov/documented: docstrings + placeholders = user friendly exception messages with next to no boilerplate. </li> <li>https://github.com/octadocs is a plugin for mkdocs.org that empowers a static site built on MkDocs with a queryable graph database. \u2014 Example: https://flake8.codes</li> <li>https://platonic.tools is a set of Python libraries to represent various backends as Pythonic data constructs (for example, a Redis collection as a Python <code>dict</code>)</li> <li>https://github.com/anatoly-scherbakov/geopatterns-demo/ is a demo project to showcase how to write cloud-native Python code on AWS Lambda platform and manage it using HashiCorp Terraform, \u2014 prepared for, and demonstrated at, Barnaul Python Conf 2021 (see below)</li> <li>https://github.com/ysv-rs/ysv is a Rust command-line application that converts CSV input into CSV output, cleans and standardizes the data</li> <li>https://github.com/anatoly-scherbakov/vendetta is a Python app that generates CSV tables with randomized data based on YAML specifications for testing purposes</li> </ul>"}]}